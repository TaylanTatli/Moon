?airquality
data(airquality)
nearZeroVar(airquality)
library(caret)
nearZeroVar(airquality)
table(is.na(airquality))
nearZeroVar(x = airquality)
?nearZeroVar
data(BloodBrain) nearZeroVar(bbbDescr)
data(BloodBrain) nearZeroVar(bbbDescr, saveMetrics = T)
nearZeroVar(x = airquality, saveMetrics = T)
data(etitanic)
library(earth) data(etitanic)
str(etitanic)
str(mtcars)
?model.matrix
str(mtcars)
dummies <- dummyVars(mpc=g ~ ., data = mtcars) head(predict(dummies, newdata = mtcars))
dummies <- dummyVars(mpg ~ ., data = mtcars) head(predict(dummies, newdata = mtcars))
dummies <- dummyVars(vs ~ ., data = mtcars) head(predict(dummies, newdata = mtcars))
dummies <- dummyVars(vs ~ ., data = mtcars) predict(dummies, newdata = mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
dummies <- dummyVars(vs ~ ., data = mtcars) predict(dummies, newdata = mtcars)\
dummies <- dummyVars(vs ~ ., data = mtcars) predict(dummies, newdata = mtcars)
?mtcars
customers <- data.frame(                 id = c(10, 20, 30, 40, 50),                 gender = c('male', 'female', 'female', 'male', 'female'),                 mood = c('happy', 'sad', 'happy', 'sad', 'happy'),                 outcome = c(1, 1, 0, 0, 0)) dmy <- dummyVars(" ~ .", data = customers, fullRank = T) trsf <- data.frame(predict(dmy, newdata = customers)) print(trsf)
customers <- data.frame(                 id = c(10, 20, 30, 40, 50),                 gender = c('male', 'female', 'female', 'male', 'female'),                 mood = c('happy', 'sad', 'happy', 'sad', 'happy'),                 outcome = c(1, 1, 0, 0, 0)) dmy <- dummyVars(" ~ .", data = customers) trsf <- data.frame(predict(dmy, newdata = customers)) print(trsf)
customers <- data.frame(                 id = c(10, 20, 30, 40, 50),                 gender = c('male', 'male', 'female', 'male', 'female'),                 mood = c('happy', 'sad', 'happy', 'sad', 'happy'),                 outcome = c(1, 1, 0, 0, 0)) dmy <- dummyVars(" ~ .", data = customers, fullRank = T) trsf <- data.frame(predict(dmy, newdata = customers)) print(trsf)
args(dummyVars)
?dummyVars
?OrchardSprays
datasets::AirPassengers %>% head()
head(datasets::AirPassengers)
head(datasets::CO2)
?CO2
head(datasets::euro)
head(datasets::Nile)
head(datasets::sleep)
head(datasets::ability.cov)
head(datasets::volcano)
head(datasets::attenu)
head(datasets::anscombe)
head(datasets::BOD)
head(datasets::InsectSprays)
head(datasets::Orange)
head(datasets::WorldPhones)
head(datasets::faithful)
head(datasets::islands)
head(datasets::HairEyeColor)
head(datasets::LifeCycleSavings)
head(datasets::quakes)
head(datasets::pressure)
head(datasets::presidents)
library(dplyr)
datasets::lh
head(datasets::state.x77)
head(datasets::PlantGrowth)
head(datasets::USPersonalExpenditure)
head(datasets::trees)
head(datasets::Titanic)
head(datasets::Orange)
head(datasets::lynx)
head(datasets::swiss)
head(datasets::UCBAdmissions)
head(datasets::WWWusage)
head(datasets::swiss)
head(datasets::nhtemp)
head(datasets::Formaldehyde)
head(datasets::DNase)
head(datasets::EuStockMarkets)
head(datasets::occupationalStatus)
head(datasets::Seatbelts)
head(datasets::randu)
head(datasets::Puromycin)
table(Puromycin$state)
head(datasets::state.center)
head(datasets::quakes)
head(datasets::state.region)
head(datasets::state.x77)
head(datasets::sunspots)
head(datasets::treering)
head(datasets::tree)
head(datasets::trees)
head(datasets::BJsales.lead)
head(datasets::BJsales)
carsdt <- mtcars
carsdt
carsdt <- carsdt %>% select(1,2,3,4,6)
carsdt
carsdt <- mtcars
carsdt <- carsdt %>% select(1,2,3,4,6,7,8)
carsdt
carsdt <- cars %>% mutate(ownerGender)
carsdt <- cars %>% mutate(ownerGender=vs)
carsdt <- carsdt %>% mutate(ownerGender=vs)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% mutate(ownerGender = vs)
head(catsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% mutate(ownerGender = vs)
head(carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% mutate(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender != 0)] <- "FM"
head(carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender != 0)] <- "FM"
head(carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
which(carsdt$ownerGender == 0)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
head(carsdt)
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
head(carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 2, 3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
head(carsdt)
carsdt$ownerGender <- as.factor(carsdt$ownerGender)
head(carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1,3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
carsdt$ownerGender <- as.factor(carsdt$ownerGender)
head(carsdt)
dummGender <- dummyVars(formula=mpg~.,data=carsdt)
predict(dummGender,carsdt)
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1,3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
carsdt$ownerGender <- as.factor(carsdt$ownerGender)
head(carsdt)
dummGender <- dummyVars(formula = mpg ~ ., data = carsdt)
head(predict(dummGender,carsdt))
cor(carsdt)
str(dummGender)
str(predict(dummGender,carsdt))
cor(predict(dummGender,carsdt))
cor(predict(dummGender,carsdt))
# data preProcessing with `caret`
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1,3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
carsdt$ownerGender <- as.factor(carsdt$ownerGender)
head(carsdt)
dummGender <- dummyVars(formula = mpg ~ ., data = carsdt)
dummyMatri <- predict(dummGender, carsdt) head(dummyMatri)
dummyMatri <- data.frame(predict(dummGender, carsdt),stringsAsFactors = F)
dummyMatri
cor(dummyMatri$ownerGender.FM, dummyMatri$ownerGender.M)
dummGender <- dummyVars(formula = mpg ~ ., data = carsdt,fullRank=T)
dummyMatri <- data.frame(predict(dummGender, carsdt),stringsAsFactors = F)
head(dummyMatri)
cor(dummyMatri$ownerGender.FM,dummyMatri$ownerGender.M)
dummGender <- dummyVars(formula = mpg ~ ., data = carsdt,fullRank=T)
dummyMatri <- data.frame(predict(dummGender, carsdt),stringsAsFactors = F) head(dummyMatri)
?nearZeroVar
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1, 3, 4, 6, 7, 8)
head(carsdt)
table(carsdt$vs)
table(mtcars$am)
table(mtcars$cyl)
nearZeroVar(mtcars)
nearZeroVar(mtcars,saveMetrics = T)
mtcars$am <- 1
nearZeroVar(mtcars, saveMetrics = T)
library(caret)
library(dplyr)
nearZeroVar(mtcars, saveMetrics = T)
mtcars$am <- 1
nearZeroVar(mtcars, saveMetrics = T)
library(caret)
library(dplyr)
nearZeroVar(mtcars, saveMetrics = T)
library(caret)
library(dplyr)
data(mtcars)
nearZeroVar(mtcars, saveMetrics = T)
mtcars$am <- 1
nearZeroVar(mtcars, saveMetrics = T)
nearZeroVar(mtcars)
mtcars %>% select(-nearZeroVar(mtcars)) %>% head
# data preProcessing with `caret`
## dummy variables
library(caret)
library(dplyr)
carsdt <- mtcars %>% select(1,3, 4, 6, 7, 8)
carsdt <- carsdt %>% rename(ownerGender = vs)
carsdt$ownerGender[which(carsdt$ownerGender == 0)] <- "M"
carsdt$ownerGender[which(carsdt$ownerGender == 1)] <- "FM"
carsdt$ownerGender <- as.factor(carsdt$ownerGender)
head(carsdt)
dummGender <- dummyVars(formula = mpg ~ ., data = carsdt,fullRank=T)
dummyMatri <- data.frame(predict(dummGender, carsdt),stringsAsFactors = F) head(dummyMatri) ## zero- and near zero-variance variables library(caret)
library(dplyr)
data(mtcars)
nearZeroVar(mtcars, saveMetrics = T)
mtcars$am <- 1
nearZeroVar(mtcars, saveMetrics = T)
mtcars %>% select(-nearZeroVar(mtcars)) %>% head
filteredDescr
data(mdrr) data.frame(table(mdrrDescr$nR11))
head(mdrr)
head(mdrrDescr)
dim(mdrrDescr)
descrCor <- cor(mdrrDescr) highCorr <- sum(abs(descrCor[upper.tri(descrCor)]) > .999)
highCorr
I(highCorr)
descrCor <- cor(mdrrDescr) summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorDescr
filteredDescr <- filteredDescr[, - highlyCorDescr]
mdrrDescr <- mdrrDescr[, - highlyCorDescr]
dim(mdrrDescr)
descrCor2 <- cor(filteredDescr) summary(descrCor2[upper.tri(descrCor2)])
descrCor2 <- cor(mdrrDescr) summary(descrCor2[upper.tri(descrCor2)])
upper.tri(cor(mtcars))
cor(mtcars)
data(mtcars)
cor(mtcars)
c<-cor(mtcars)
options("defaultPackages")
install.packages("datasets")
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
abs(predCors) > 0.7
upper.tri(abs(predCors)) > 0.7
?upper.tri
upper.tri(predCors)
predCors[upper.tri(predCors)]
predCors[upper.tri(predCors)]>0.7
abs(predCors[upper.tri(predCors)] > 0.7)
abs(predCors[upper.tri(predCors)]) > 0.7
sum(abs(predCors[upper.tri(predCors)]) > 0.7)
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors,cutoff = 0.75,verbose = T)
dtCors <- predCors[, - highCors]
cor(dtCors)
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors, cutoff = 0.75)
dtCors <- predCors[, - highCors]
cor(dtCors)
summary(cor(dtCors)[upper.tri(cor(dtCors))])
summary(dtCors[upper.tri(dtCors)])
dtCors
?findCorrelation
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors, cutoff = 0.9)
dtCors <- predCors[, - highCors]
highCors <- findCorrelation(predCors, cutoff = 0.9,verbose = T)
highCors <- findCorrelation(predCors, cutoff = 0.6,verbose = T)
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors, cutoff = 0.7,verbose = T)
dtCors <- predCors[, - highCors]
dtCors
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors, cutoff = 0.7,verbose = T)
dtCors <- predCors[, - highCors]
dtCors
highCors <- findCorrelation(predCors, cutoff = 0.7, verbose = T)
dtCors <- predCors[, - highCors]
dtCors
library(caret)
library(dplyr)
data(mtcars)
predCors <- cor(mtcars)
predCors
highCors <- findCorrelation(predCors, cutoff = 0.7,verbose = T)
dtCors <- predCors[, - highCors]
dtCors
?findCorrelation
ltfrDesign <- matrix(0, nrow = 6, ncol = 6) ltfrDesign[, 1] <- c(1, 1, 1, 1, 1, 1) ltfrDesign[, 2] <- c(1, 1, 1, 0, 0, 0) ltfrDesign[, 3] <- c(0, 0, 0, 1, 1, 1) ltfrDesign[, 4] <- c(1, 0, 0, 1, 0, 0) ltfrDesign[, 5] <- c(0, 1, 0, 0, 1, 0) ltfrDesign[, 6] <- c(0, 0, 1, 0, 0, 1)
cor(ltfrDesign)
findLinearCombos(ltfrDesign)
dtCors
findLinearCombos(mtcars)
ltfrDesign <- matrix(0, nrow = 6, ncol = 6) ltfrDesign[, 1] <- c(1, 1, 1, 1, 1, 1) ltfrDesign[, 2] <- c(1, 1, 1, 0, 0, 0) ltfrDesign[, 3] <- c(0, 0, 0, 1, 1, 1) ltfrDesign[, 4] <- c(1, 0, 0, 1, 0, 0) ltfrDesign[, 5] <- c(0, 1, 0, 0, 1, 0) ltfrDesign[, 6] <- c(0, 0, 1, 0, 0, 1)linearMatrix <- matrix(0, nrow = 6, ncol = 6) linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearMatrix <- matrix(0, nrow = 6, ncol = 6)
linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearMatrix
findLinearCombos(linearMatrix)
linearMatrix <- matrix(0, nrow = 6, ncol = 6) linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearVars <- findLinearCombos(linearMatrix)
linearVars
newMatrix <- linearMatrix[,-linearVars]
linearMatrix <- matrix(0, nrow = 6, ncol = 6) linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearVars <- findLinearCombos(linearMatrix)
linearVars
newMatrix <- linearMatrix[,-linearVars]
newMatrix <- linearMatrix[,-linearVars$remove]
linearMatrix <- matrix(0, nrow = 6, ncol = 6) linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearVars <- findLinearCombos(linearMatrix)
linearVars
newMatrix <- linearMatrix[,-linearVars$remove]
newMatrix
set.seed(123)
linearMatrix <- matrix(0, nrow = 6, ncol = 6) linearMatrix[, 1] <- runif(6, 0, 1)
linearMatrix[, 2] <- runif(6, 0, 1)
linearMatrix[, 3] <- linearMatrix[, 1] + linearMatrix[, 2]
linearMatrix[, 4] <- linearMatrix[, 1] + linearMatrix[, 3]
linearMatrix[, 5] <- linearMatrix[, 3] + linearMatrix[, 2]
linearMatrix[, 6] <- linearMatrix[, 1] - linearMatrix[, 2]
linearVars <- findLinearCombos(linearMatrix)
linearVars
newMatrix <- linearMatrix[,-linearVars$remove]
newMatrix
ltfrDesign <- matrix(0, nrow = 6, ncol = 6) ltfrDesign[, 1] <- c(1, 1, 1, 1, 1, 1) ltfrDesign[, 2] <- c(1, 1, 1, 0, 0, 0) ltfrDesign[, 3] <- c(0, 0, 0, 1, 1, 1) ltfrDesign[, 4] <- c(1, 0, 0, 1, 0, 0) ltfrDesign[, 5] <- c(0, 1, 0, 0, 1, 0) ltfrDesign[, 6] <- c(0, 0, 1, 0, 0, 1)
ltfrDesign
comboInfo <- findLinearCombos(ltfrDesign) comboInfo
ltfrDesign[, - comboInfo$remove]
set.seed(96) inTrain <- sample(seq(along = mdrrClass), length(mdrrClass) / 2)
data(mdrr)
set.seed(96) inTrain <- sample(seq(along = mdrrClass), length(mdrrClass) / 2)
training <- filteredDescr[inTrain,] test <- filteredDescr[-inTrain,] trainMDRR <- mdrrClass[inTrain] testMDRR <- mdrrClass[-inTrain]
training <- mdrrDescr[inTrain,] test <- mdrrDescr[-inTrain,] trainMDRR <- mdrrClass[inTrain] testMDRR <- mdrrClass[-inTrain]
preProcValues <- preProcess(training, method = c("center", "scale")) trainTransformed <- predict(preProcValues, training) testTransformed <- predict(preProcValues, test)
getwd()
Matrix <- matrix(0, nrow = 6, ncol = 6)
# data preProcessing with `caret` ## centering and scaling set.seed(123) Matrix <- matrix(0, nrow = 6, ncol = 6) Matrix[, 1] <- runif(100, 0, 100) Matrix[, 2] <- runif(100, 0, 100) Matrix[, 3] <- runif(100, 0, 100) Matrix[, 4] <- runif(100, 0, 100) Matrix[, 5] <- runif(100, 0, 100) Matrix[, 6] <- runif(100, 0, 100)
# data preProcessing with `caret` ## centering and scaling set.seed(123) Matrix <- matrix(0, nrow = 100, ncol = 6) Matrix[, 1] <- runif(100, 0, 100) Matrix[, 2] <- runif(100, 0, 100) Matrix[, 3] <- runif(100, 0, 100) Matrix[, 4] <- runif(100, 0, 100) Matrix[, 5] <- runif(100, 0, 100) Matrix[, 6] <- runif(100, 0, 100)
library(caret)
Matrix <- data.frame(Matrix,stringsAsFactors = F)
# data preProcessing with `caret` ## centering and scaling library(caret) set.seed(123) Matrix <- matrix(0, nrow = 100, ncol = 6) Matrix[, 1] <- runif(100, 0, 100) Matrix[, 2] <- runif(100, 0, 100) Matrix[, 3] <- runif(100, 0, 100) Matrix[, 4] <- runif(100, 0, 100) Matrix[, 5] <- runif(100, 0, 100) Matrix[, 6] <- runif(100, 0, 100) Matrix <- data.frame(Matrix,stringsAsFactors = F) inTrain <- createDataPartition(y = Matrix$X6, p = 0.7, list = F) training <- Matrix[inTrain,] testing <- Matrix[-inTrain,]
# data preProcessing with `caret` ## centering and scaling library(caret) set.seed(123) Matrix <- matrix(0, nrow = 100, ncol = 6) Matrix[, 1] <- runif(100, 0, 100) Matrix[, 2] <- runif(100, 0, 100) Matrix[, 3] <- runif(100, 0, 100) Matrix[, 4] <- runif(100, 0, 100) Matrix[, 5] <- runif(100, 0, 100) Matrix[, 6] <- runif(100, 0, 100) Matrix <- data.frame(Matrix,stringsAsFactors = F) inTrain <- createDataPartition(y = Matrix$X6, p = 0.7, list = F) training <- Matrix[inTrain,] testing <- Matrix[-inTrain,] scal_cent <- preProcess(training[, -6], method = c("center", "scale")) trainTrans <- predict(scal_cent, training[,-6]) testTrans <- predict(scal_cent, testing[,-6])
training
head(training)
head(trainTrans)
summary(trainTrans$X1)
summary(training$X1)
summary((trainTrans$X1 - mean(trainTrans$X1)) / sd(trainTrans$X1))
?preProcess
summary(trainTrans)
summary(trainTrans$X1)
summary(trainTrans$X1)
normalTrans <- (training[, 1] - mean(training[, 1])) / sd(training[, 1])
summary(normalTrans)
identical(trainTrans,normalTrans)
head(normalTrans)
head(trainTrans)
head(trainTrans$X1)
identical(trainTrans$X1,normalTrans)
# data preProcessing with `caret` ## centering and scaling library(caret) set.seed(123) Matrix <- matrix(0, nrow = 100, ncol = 6) Matrix[, 1] <- runif(100, 0, 100) Matrix[, 2] <- runif(100, 0, 100) Matrix[, 3] <- runif(100, 0, 100) Matrix[, 4] <- runif(100, 0, 100) Matrix[, 5] <- runif(100, 0, 100) Matrix[, 6] <- runif(100, 0, 100) Matrix <- data.frame(Matrix,stringsAsFactors = F) inTrain <- createDataPartition(y = Matrix$X6, p = 0.7, list = F) training <- Matrix[inTrain,] testing <- Matrix[-inTrain,] ### (trainTrans$X1 - mean(trainTrans$X1)) / sd(trainTrans$X1) scal_cent <- preProcess(training[, -6], method = c("center", "scale")) trainTrans <- predict(scal_cent, training[, -6]) normalTrans <- (training[, 1] - mean(training[, 1])) / sd(training[, 1]) identical(trainTrans$X1, normalTrans) testTrans <- predict(scal_cent, testing[,-6])
identical(trainTrans$X1, normalTrans)
summary(trainTrans)
scal_cent_0_1 <- preProcess(training[, -6], method = c("center", "scale"), ranges = c(0, 1)) trainTrans_0_1 <- predict(scal_cent, training[, -6]) summary(trainTrans_0_1$X1)
?preProcess
scal_cent_0_1 <- preProcess(training[, -6], method = c("center", "scale"), range = c(0, 1))
trainTrans_0_1 <- predict(scal_cent, training[, -6])
summary(trainTrans_0_1$X1)
scal_cent_0_1 <- preProcess(training[, -6], method = c("center", "scale"), ranges = c(0, 1)) trainTrans_0_1 <- predict(scal_cent_0_1, training[, -6]) summary(trainTrans_0_1$X1)
scal_cent_0_1 <- preProcess(training[, -6], method = c("center", "scale"), range = c(0, 1)) trainTrans_0_1 <- predict(scal_cent_0_1, training[, -6]) summary(trainTrans_0_1$X1)
scal_cent_0_1 <- preProcess(training[, -6], method = c("center", "range"), range = c(0, 1))
trainTrans_0_1 <- predict(scal_cent_0_1, training[, -6])
scal_cent_0_1 <- preProcess(training[, -6], method = "range", range = c(0, 1))
trainTrans_0_1 <- predict(scal_cent_0_1, training[, -6])
summary(trainTrans_0_1$X1)
scal_cent_0_1 <- preProcess(training[, -6], method = "range")
trainTrans_0_1 <- predict(scal_cent_0_1, training[, -6])
summary(trainTrans_0_1$X1)
summary(trainTrans_0_1)
?preProcess
?impute
??impute
library(mice)
?impute
?mice
library(caret) data(airquality) airQuality <- airquality apply(airQuality, 2, function(x) table(is.na(x)))
sapply(airQuality, function(x) table(is.na(x)))
sapply(airQuality, function(x) table(is.na(x)),simplify = F)
sapply(airQuality, function(x) table(is.na(x)),simplify = T)
lapply(airQuality, function(x) table(is.na(x)),simplify = T)
lapply(airQuality, function(x) table(is.na(x)))
preProcess(x = airQuality[,-1], method="rpart")
library(rpart)
preProcess(x = airQuality[,-1], method="rpart")
?preProcess
preProcess(x = airQuality[,-1], method="knnImpute")
modelmpute <- preProcess(x = airQuality[, -1], method = "knnImpute")
predict(modelmpute,airQuality[,-1])
predict(modelmpute,airQuality[,-1])$Solar.R
predictSolarR <- predict(modelmpute, airQuality[, -1])$Solar.R
airQuality$Solar.R
(airQuality$Solar.R - mean(airQuality$Solar.R)) / sd(airQuality$Solar.R)
(airQuality$Solar.R - mean(airQuality$Solar.R, na.rm = T)) / sd(airQuality$Solar.R, na.rm = T)
library(kernlab) data(spam)
spam[,58]
spam$capitalAve
library(randomForest)
?randomForest
?norm
?binorm
??binorm
?rnorm
?rbinom
rbinom(n=10,size = 5,prob = 0.5)
rbinom(n=2,size = 5,prob = 0.5)
rbinom(n=1,size = 5,prob = 0.5)
rbinom(n=10,size = 2,prob = 0.5)
rbinom(n=10,size = 2,prob = 0.7)
rbinom(n=10,size = 2,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=10,size = 1,prob = 0.7)
rbinom(n=100,size = 1,prob = 0.7)
rbinom(n=10,size = 10,prob = 0.7)
rbinom(n=100,size = 2,prob = 0.7)
rbinom(n=100,size = 10,prob = 0.7)
library(caret) data(airquality) airQuality <- airquality sapply(airQuality, function(x) table(is.na(x)), simplify = T)
library(caret) data(airquality) airQuality <- airquality sapply(airQuality, function(x) table(is.na(x)), simplify = T)
sapply(airQuality, function(x) table(is.na(x)), simplify = T)%>% data.frame()
library(dplyr)
sapply(airQuality, function(x) table(is.na(x)), simplify = T)%>% data.frame()
sapply(airQuality, function(x) table(is.na(x)), simplify = T)%>% data.frame()
sapply(airQuality, function(x) table(is.na(x)), simplify = T)
?airquality
sapply(training, function(x) table(is.na(x)), simplify = T)
library(caret) library(dplyr) data(airquality) airQuality <- airquality sapply(airQuality, function(x) table(is.na(x)), simplify = T) inTrain <- createDataPartition(y = airQuality$Ozone, p = 0.7, list = FALSE) training <- airQuality[inTrain,] testing <- airQuality[-inTrain,]
library(caret) library(dplyr) data(airquality) airQuality <- airquality sapply(airQuality, function(x) table(is.na(x)), simplify = T) inTrain <- createDataPartition(y = airQuality$Ozone, p = 0.7, list = FALSE) training <- airQuality[inTrain,] testing <- airQuality[-inTrain,]
inTrain <- createDataPartition(y = airQuality$Ozone, p = 0.7, list = FALSE)
inTrain <- createDataPartition(y = airQuality$Temp, p = 0.7, list = FALSE)
training <- airQuality[inTrain,]
testing <- airQuality[-inTrain,]
sapply(training, function(x) table(is.na(x)), simplify = T)
ModeImpute <- preProcess(x = training[, -3], method = "knnImpute") trainingImpute <- predict(ModeImpute, training[,-3])
head(trainingImpute)
head(training)
sapply(trainingImpute, function(x) table(is.na(x)), simplify =T)
sapply(trainingImpute, function(x) table(is.na(x)), simplify = T)
sapply(trainingImpute, function(x) table(is.na(x)), simplify = F)
head(trainingImpute)
identical((training$Temp - mean(training$Temp)) / sd(training$Temp),trainingImpute$Temp)
identical((training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T), trainingImpute$Ozone)
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T) == trainingImpute$Ozone
str(trainingImpute)
trainingImpute[61,1]
round((training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T),6) == trainingImpute$Ozone
round((training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T),7) == trainingImpute$Ozone
trainingImpute
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)
trainingImpute$Ozone
round(trainingImpute$Ozone,6)
round(trainingImpute$Ozone,7)
round(trainingImpute$Ozone,8)
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T) == round(trainingImpute$Ozone, 8)
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)
round(trainingImpute$Ozone, 8)
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)[1]
(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)[[1]]
cent<-(training$Ozone - mean(training$Ozone, na.rm = T)) / sd(training$Ozone, na.rm = T)
cent[1]
cent
round(trainingImpute$Ozone, 8)
round(trainingImpute$Ozone, 8)[1]
round(trainingImpute$Ozone, 8)[1] == cent[1]
round(trainingImpute$Ozone, 8)[1] -cent[1]
rounded <- round(trainingImpute$Ozone, 8)
rounded[1] == cent[1]
rounded[1]
cent[1]
mean(c(-0.03944452, - 0.94782851, - 0.44665113, - 0.60326906))
testingImpute <- predict(ModeImpute, testing[,-3])
testingImpute
library(caret) library(dplyr) data(airquality) airQuality <- airquality airQuality <- airQuality[,c(-4,-5)] sapply(airQuality, function(x) table(is.na(x)), simplify = T)
airQuality
library(caret) library(dplyr) data(airquality) airQuality <- airquality airQuality <- airQuality[,-c(4,5)] sapply(airQuality, function(x) table(is.na(x)), simplify = T)
head(airQuality)
head(airquality)
library(caret) library(dplyr) data(airquality) airQuality <- airquality airQuality <- airQuality[,-c(5,6)] sapply(airQuality, function(x) table(is.na(x)), simplify = T)
set.seed(123) inTrain <- createDataPartition(y = airQuality$Temp, p = 0.7, list = FALSE) training <- airQuality[inTrain,] testing <- airQuality[-inTrain,] ModeImpute <- preProcess(x = training[, -3], method = "knnImpute") trainingImpute <- predict(ModeImpute, training[,-3]) sapply(trainingImpute, function(x) table(is.na(x)), simplify = F)
training
set.seed(123) inTrain <- createDataPartition(y = airQuality$Wind, p = 0.7, list = FALSE) training <- airQuality[inTrain,] testing <- airQuality[-inTrain,] ModeImpute <- preProcess(x = training[, -3], method = "knnImpute") trainingImpute <- predict(ModeImpute, training[,-3]) sapply(trainingImpute, function(x) table(is.na(x)), simplify = F)
head(trainingImpute)
identical((training$Temp - mean(training$Temp)) / sd(training$Temp), trainingImpute$Temp)
testingImpute <- predict(ModeImpute, testing[,-3])
?preProcess
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] mad <- abs(cor(training[, -58])) # Every variable should has a correlation value which is equal to 1 to itself, so here just set the diagnal of the correlation matrix as 0 diag(mad) <- 0 which(mad > 0.8, arr.ind = T) names(spam)[c(34, 32, 40)] #[1] "num415" "num857" "direct" par(mfrow = c(1, 3)) plot(spam[, 32], spam[, 34]) plot(spam[, 32], spam[, 40]) plot(spam[, 34], spam[, 40])
plot(spam[, 32], spam[, 34])
plot(spam[, 32], spam[, 40])
plot(spam[, 34], spam[, 40])
par(mfrow = c(1, 1))
diag(mad) <- 0 which(mad > 0.8, arr.ind = T) names(spam)[c(34, 32, 40)] #[1] "num415" "num857" "direct"
which(mad > 0.8, arr.ind = T)
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] mad <- abs(cor(training[, -58])) # Every variable should has a correlation value which is equal to 1 to itself, so here just set the diagnal of the correlation matrix as 0 diag(mad) <- 0 which(mad > 0.8, arr.ind = T) names(spam)[c(34, 32, 40)] #[1] "num415" "num857" "direct" preProc <- preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = 2) trainPC <- predict(preProc, log10(training[, -58] + 1))
kappa(cor(training[,-58]))
kappa(cor(training[, -58]))
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] # there is high correlation among predictors kappa(cor(training[, -58])) [1] 2823.785
trainPC$type = training$type
training$type
table(training$type)
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = 2) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
str(training$type)
modelFit <- train(type ~ ., method = "glm", preProcess = "pca", data = training, family = "binomial") confusionMatrix(testing$type, predict(modelFit, testing))
?preProcess
preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = NULL)
preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = 2)
preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = 47)
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", pcaComp = 47) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
warnings()
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", thresh=0.8) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", thresh=0.75)
trainPC <- predict(preProc, log10(training[, -58] + 1))
# apply the training-pca model to testing
testPC <- predict(preProc, log10(testing[, -58] + 1))
trainPC$type <- training$type
testPC$type <- testing$type
modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial")
confusionMatrix(testing$type, predict(modelFit, testPC))
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", thresh=0.15)
trainPC <- predict(preProc, log10(training[, -58] + 1))
# apply the training-pca model to testing
testPC <- predict(preProc, log10(testing[, -58] + 1))
trainPC$type <- training$type
testPC$type <- testing$type
modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial")
confusionMatrix(testing$type, predict(modelFit, testPC))
modelFit <- train(type ~ ., method = "glm", preProcess = "pca", thresh=0.8, data = training, family = "binomial") confusionMatrix(testing$type, predict(modelFit, testing))
?train
modelFit <- train(type ~ ., method = "glm", preProcess = "pca", thresh = 0.8, data = training, family = "binomial")
modelFit <- train(type ~ ., method = "glm", preProcess = "pca", data = training, family = "binomial")
confusionMatrix(testing$type, predict(modelFit, testing))
modelFit
modelFit
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", thresh=0.8)
trainPC <- predict(preProc, log10(training[, -58] + 1))
# apply the training-pca model to testing
testPC <- predict(preProc, log10(testing[, -58] + 1))
trainPC$type <- training$type
testPC$type <- testing$type
modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial")
modelFit
preProc <- preProcess(log10(training[, -58] + 1), method = "pca", pcaComp=57)
preProc
preProcess(log10(training[, -58] + 1), method = "pca")
preProc$dim
preProc$ica
preProc$numComp
preProc <- preProcess(log10(training[, -58] + 1), method = "pca")
preProc$numComp
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] # there is high correlation among predictors kappa(cor(training[, -58])) [1] 2823.785
# log10(training[, -58] + 1)-- make data a little bit more Gaussian preProc <- preProcess(log10(training[, -58] + 1), method = "pca",thresh=0.8) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] # there is high correlation among predictors kappa(cor(training[, -58])) #[1] 2823.785
# log10(training[, -58] + 1)-- make data a little bit more Gaussian preProc <- preProcess(log10(training[, -58] + 1), method = "pca",thresh=0.8) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
library(AppliedPredictiveModeling) data(schedulingData) str(schedulingData)
pp_hpc <- preProcess(schedulingData[, -8],method = c("center", "scale", "YeoJohnson"))
pp_hpc
transformed <- predict(pp_hpc, newdata = schedulingData[, -8]) head(transformed)
transformed$NumPending
hist(transformed$NumPending)
quantile(transformed$NumPending)
nearZeroVar(schedulingData[,-8])
nearZeroVar(schedulingData[,-8],saveMetrics = T)
nearZeroVar(schedulingData[, -8], saveMetrics = T)
pp_no_nzv <- preProcess(schedulingData[, -8], method = c("center", "scale", "YeoJohnson", "nzv")) pp_no_nzv
pp_no_nzv$bagImp
pp_no_nzv
pp_no_nzv$et
pp_no_nzv$pcaComp
library(caret) library(kernlab) data(spam) set.seed(123) inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE) training <- spam[inTrain,] testing <- spam[-inTrain,] # there is high correlation among predictors kappa(cor(training[, -58])) #[1] 2823.785
# log10(training[, -58] + 1)-- make data a little bit more Gaussian preProc <- preProcess(log10(training[, -58] + 1), method = "pca",thresh=0.8) trainPC <- predict(preProc, log10(training[, -58] + 1)) # apply the training-pca model to testing testPC <- predict(preProc, log10(testing[, -58] + 1)) trainPC$type <- training$type testPC$type <- testing$type modelFit <- train(type ~ ., data = trainPC, method = "glm", family = "binomial") confusionMatrix(testing$type, predict(modelFit, testPC))
preProc$pcaComp
preProc$thresh
library(AppliedPredictiveModeling) data(schedulingData) str(schedulingData) pp_hpc <- preProcess(schedulingData[, -8],method = c("center", "scale", "YeoJohnson")) pp_hpc transformed <- predict(pp_hpc, newdata = schedulingData[, -8]) head(transformed) quantile(transformed$NumPending) nearZeroVar(schedulingData[, -8], saveMetrics = T) pp_no_nzv <- preProcess(schedulingData[, -8], method = c("center", "scale", "YeoJohnson", "nzv")) pp_no_nzv
head(predict(pp_no_nzv, newdata = schedulingData[1:6, -8]))
